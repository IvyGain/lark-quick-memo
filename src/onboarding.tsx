import {
  Action,
  ActionPanel,
  Detail,
  Form,
  showHUD,
  showToast,
  Toast,
  useNavigation,
  openExtensionPreferences,
  getPreferenceValues,
} from "@raycast/api";
import { useState } from "react";
import { getTenantAccessToken, sendTextMessage } from "./lark";
import { decorateWithTimestamp } from "./utils";

type OnboardingStep = "welcome" | "lark-setup" | "basic-config" | "receiver-config" | "test-connection" | "complete";

interface OnboardingState {
  currentStep: OnboardingStep;
  hasLarkApp: boolean;
  domain: string;
  appId: string;
  appSecret: string;
  receiveId: string;
  receiveIdType: "email" | "open_id";
}

export default function OnboardingWizard() {
  const { pop } = useNavigation();
  const [state, setState] = useState<OnboardingState>({
    currentStep: "welcome",
    hasLarkApp: false,
    domain: "https://open.larksuite.com",
    appId: "",
    appSecret: "",
    receiveId: "",
    receiveIdType: "email",
  });

  const nextStep = () => {
    const stepOrder: OnboardingStep[] = ["welcome", "lark-setup", "basic-config", "receiver-config", "test-connection", "complete"];
    const currentIndex = stepOrder.indexOf(state.currentStep);
    if (currentIndex < stepOrder.length - 1) {
      setState({ ...state, currentStep: stepOrder[currentIndex + 1] });
    }
  };

  const prevStep = () => {
    const stepOrder: OnboardingStep[] = ["welcome", "lark-setup", "basic-config", "receiver-config", "test-connection", "complete"];
    const currentIndex = stepOrder.indexOf(state.currentStep);
    if (currentIndex > 0) {
      setState({ ...state, currentStep: stepOrder[currentIndex - 1] });
    }
  };

  const testConnection = async () => {
    try {
      showToast({ style: Toast.Style.Animated, title: "Êé•Á∂ö„ÉÜ„Çπ„Éà‰∏≠..." });
      
      // Temporarily set preferences for testing
      const testPrefs = {
        larkDomain: state.domain,
        appId: state.appId,
        appSecret: state.appSecret,
        receiveIdType: state.receiveIdType,
        receiveId: state.receiveId,
        prefixTimestamp: true,
      };

      // Mock getPreferenceValues for testing
      const originalGet = getPreferenceValues;
      (global as any).getPreferenceValues = () => testPrefs;

      const token = await getTenantAccessToken();
      const testMessage = "üéâ Lark Quick Memo „Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÂÆå‰∫ÜÔºÅ\n„Åä„ÇÅ„Åß„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô„ÄÇÊ≠£Â∏∏„Å´Âãï‰Ωú„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ";
      const decoratedMessage = decorateWithTimestamp(testMessage, true);
      
      await sendTextMessage(token, decoratedMessage);
      
      // Restore original function
      (global as any).getPreferenceValues = originalGet;
      
      showToast({ style: Toast.Style.Success, title: "Êé•Á∂öÊàêÂäüÔºÅ", message: "Lark„Å´„ÉÜ„Çπ„Éà„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°„Åó„Åæ„Åó„Åü„ÄÇ" });
      nextStep();
    } catch (error: any) {
      showToast({ 
        style: Toast.Style.Failure, 
        title: "Êé•Á∂öÂ§±Êïó", 
        message: error.message || "Ë®≠ÂÆö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ" 
      });
    }
  };

  const completeSetup = async () => {
    try {
      // Open extension preferences to save settings
      await openExtensionPreferences();
      showHUD("Ë®≠ÂÆöÁîªÈù¢„ÇíÈñã„Åç„Åæ„Åó„Åü„ÄÇË®≠ÂÆö„Çí‰øùÂ≠ò„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ");
    } catch (error) {
      console.error("Failed to open preferences:", error);
    }
  };

  if (state.currentStep === "welcome") {
    return (
      <Detail
        markdown={`# üöÄ Lark Quick Memo „Å∏„Çà„ÅÜ„Åì„ÅùÔºÅ

Raycast„Åã„ÇâLark/Feishu„Å∏„ÉØ„É≥„Ç¢„ÇØ„Ç∑„Éß„É≥„Åß„É°„É¢„ÇíÈÄÅ‰ø°„Åß„Åç„ÇãÊã°ÂºµÊ©üËÉΩ„Åß„Åô„ÄÇ

## ‚ú® ‰∏ª„Å™Ê©üËÉΩ

- **„ÉØ„É≥„Ç¢„ÇØ„Ç∑„Éß„É≥ÈÄÅ‰ø°**: \`Cmd+Shift+M\` ‚Üí „ÉÜ„Ç≠„Çπ„ÉàÂÖ•Âäõ ‚Üí \`Cmd+Enter\`
- **„Çø„Ç§„É†„Çπ„Çø„É≥„ÉóËá™Âãï‰ªò‰∏é**: „É°„ÉÉ„Çª„Éº„Ç∏„Å´Êó•ÊôÇ„ÇíËá™ÂãïËøΩÂä†
- **Global/ChinaÂØæÂøú**: „Å©„Å°„Çâ„ÅÆÁí∞Â¢É„Åß„ÇÇÂà©Áî®ÂèØËÉΩ
- **„Çª„Ç≠„É•„Ç¢**: Ë™çË®ºÊÉÖÂ†±„ÅØÂÆâÂÖ®„Å´‰øùÁÆ°

## üéØ „Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„ÅÆÊµÅ„Çå

1. **Lark„Ç¢„Éó„É™‰ΩúÊàê**: ÈñãÁô∫ËÄÖ„Ç≥„É≥„ÇΩ„Éº„É´„ÅßBot‰ΩúÊàê
2. **Âü∫Êú¨Ë®≠ÂÆö**: App ID„ÉªSecret„ÅÆË®≠ÂÆö
3. **Âèó‰ø°ËÄÖË®≠ÂÆö**: „É°„Éº„É´ÈÄÅ‰ø°ÂÖà„ÅÆË®≠ÂÆö
4. **Âãï‰Ωú„ÉÜ„Çπ„Éà**: ÂÆüÈöõ„Å´„ÉÜ„Çπ„ÉàÈÄÅ‰ø°

ÊâÄË¶ÅÊôÇÈñì: Á¥Ñ10ÂàÜ

Ê∫ñÂÇô„ÅØ„Åß„Åç„Åæ„Åó„Åü„ÅãÔºü`}
        actions={
          <ActionPanel>
            <Action title="„Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÈñãÂßã" onAction={nextStep} />
            <Action title="Âæå„ÅßË®≠ÂÆö„Åô„Çã" onAction={pop} />
          </ActionPanel>
        }
      />
    );
  }

  if (state.currentStep === "lark-setup") {
    return (
      <Detail
        markdown={`# üì± Lark„Ç¢„Éó„É™„ÅÆ‰ΩúÊàê

„Åæ„Åö„ÄÅLark/Feishu„Åß„Ç´„Çπ„Çø„É†„Ç¢„Éó„É™„Çí‰ΩúÊàê„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ

## üîó ÈñãÁô∫ËÄÖ„Ç≥„É≥„ÇΩ„Éº„É´„Å∏„Ç¢„ÇØ„Çª„Çπ

**GlobalÁâàÔºàÊé®Â•®Ôºâ:**
- [https://open.larksuite.com/app](https://open.larksuite.com/app)

**ChinaÁâà:**
- [https://open.feishu.cn/app](https://open.feishu.cn/app)

## üìã ‰ΩúÊàêÊâãÈ†Ü

### 1. „Ç¢„Éó„É™‰ΩúÊàê
- **„ÄåCreate App„Äç** „Çí„ÇØ„É™„ÉÉ„ÇØ
- **„ÄåCustom App„Äç** „ÇíÈÅ∏Êäû
- **App Name**: \`Quick Memo\` Ôºà‰ªªÊÑèÔºâ
- **Description**: \`Raycast extension for quick memos\`

### 2. BotÊ©üËÉΩ„ÇíÊúâÂäπÂåñ
- **„ÄåAdd features and capabilities„Äç** „Çø„Éñ
- **„ÄåBot„Äç** „ÇíÈÅ∏Êäû„Åó„Å¶ÊúâÂäπÂåñ

### 3. Ê®©ÈôêË®≠ÂÆö
- **„ÄåPermissions & Scopes„Äç** „Çø„Éñ
- ‰ª•‰∏ã„ÅÆÊ®©Èôê„ÇíËøΩÂä†:
  - ‚úÖ \`im:message\` - Send messages as the app
  - ‚úÖ \`im:message:send_as_bot\` - Send messages as bot

### 4. „Ç¢„Éó„É™„Çí„É™„É™„Éº„Çπ
- **„ÄåVersion Management & Release„Äç** „Çø„Éñ
- **„ÄåCreate Version„Äç** ‚Üí **„ÄåSubmit for Release„Äç**
- Á§æÂÜÖ„É™„É™„Éº„ÇπÂÆå‰∫Ü„Åæ„ÅßÂæÖÊ©ü

### 5. Ë™çË®ºÊÉÖÂ†±„ÇíÂèñÂæó
- **„ÄåCredentials„Äç** „Çø„Éñ„Åß‰ª•‰∏ã„Çí„Ç≥„Éî„Éº:
  - **App ID** (‰æã: \`cli_a1b2c3d4e5f6g7h8\`)
  - **App Secret** (‰æã: \`abcdef123456...\`)

„Åô„Åπ„Å¶ÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÅãÔºü`}
        actions={
          <ActionPanel>
            <Action title="ÂÆå‰∫Ü„Åó„Åæ„Åó„Åü" onAction={nextStep} />
            <Action title="Êàª„Çã" onAction={prevStep} />
          </ActionPanel>
        }
      />
    );
  }

  if (state.currentStep === "basic-config") {
    return (
      <Form
        actions={
          <ActionPanel>
            <Action.SubmitForm
              title="Ê¨°„Å∏"
              onSubmit={(values: any) => {
                setState({
                  ...state,
                  domain: values.domain,
                  appId: values.appId,
                  appSecret: values.appSecret,
                });
                nextStep();
              }}
            />
            <Action title="Êàª„Çã" onAction={prevStep} />
          </ActionPanel>
        }
      >
        <Form.Description text="Lark„Ç¢„Éó„É™„ÅÆÂü∫Êú¨Ë®≠ÂÆö„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ" />
        
        <Form.Dropdown
          id="domain"
          title="Lark Domain"
          defaultValue={state.domain}
          info="„ÅÇ„Å™„Åü„ÅÆLark/FeishuÁí∞Â¢É„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
        >
          <Form.Dropdown.Item value="https://open.larksuite.com" title="Global (open.larksuite.com)" />
          <Form.Dropdown.Item value="https://open.feishu.cn" title="China (open.feishu.cn)" />
        </Form.Dropdown>

        <Form.PasswordField
          id="appId"
          title="App ID"
          placeholder="cli_xxxxxxxxxxxxxxxx"
          defaultValue={state.appId}
          info="LarkÈñãÁô∫ËÄÖ„Ç≥„É≥„ÇΩ„Éº„É´„ÅÆ„ÄåCredentials„Äç„Çø„Éñ„Åã„Çâ„Ç≥„Éî„Éº"
        />

        <Form.PasswordField
          id="appSecret"
          title="App Secret"
          placeholder="xxxxxxxxxxxxxxxxxxxxxx"
          defaultValue={state.appSecret}
          info="LarkÈñãÁô∫ËÄÖ„Ç≥„É≥„ÇΩ„Éº„É´„ÅÆ„ÄåCredentials„Äç„Çø„Éñ„Åã„Çâ„Ç≥„Éî„Éº"
        />
      </Form>
    );
  }

  if (state.currentStep === "receiver-config") {
    return (
      <Form
        actions={
          <ActionPanel>
            <Action.SubmitForm
              title="Ê¨°„Å∏"
              onSubmit={(values: any) => {
                setState({
                  ...state,
                  receiveIdType: values.receiveIdType,
                  receiveId: values.receiveId,
                });
                nextStep();
              }}
            />
            <Action title="Êàª„Çã" onAction={prevStep} />
          </ActionPanel>
        }
      >
        <Form.Description text="„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÈÄÅ‰ø°ÂÖà„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ" />
        
        <Form.Dropdown
          id="receiveIdType"
          title="Receive ID Type"
          defaultValue={state.receiveIdType}
          info="„É°„Éº„É´„Ç¢„Éâ„É¨„ÇπÂΩ¢Âºè„ÇíÊé®Â•®„Åó„Åæ„Åô"
        >
          <Form.Dropdown.Item value="email" title="EmailÔºàÊé®Â•®Ôºâ" />
          <Form.Dropdown.Item value="open_id" title="Open IDÔºà‰∏äÁ¥öËÄÖÂêë„ÅëÔºâ" />
        </Form.Dropdown>

        <Form.TextField
          id="receiveId"
          title="Receive ID"
          placeholder="your.email@company.com"
          defaultValue={state.receiveId}
          info={
            state.receiveIdType === "email" 
              ? "„ÅÇ„Å™„Åü„ÅÆLark„É≠„Ç∞„Ç§„É≥„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÇíÊ≠£Á¢∫„Å´ÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
              : "Lark„Éó„É≠„Éï„Ç£„Éº„É´„Åã„ÇâOpen ID„Çí„Ç≥„Éî„Éº„Åó„Å¶ÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
          }
        />

        <Form.Separator />
        
        <Form.Description text="üí° „Éí„É≥„Éà: Lark„Ç¢„Éó„É™„Åß„Éó„É≠„Éï„Ç£„Éº„É´ ‚Üí „Ç¢„Ç´„Ç¶„É≥„ÉàË®≠ÂÆö„Åã„ÇâÊ≠£Á¢∫„Å™„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÇíÁ¢∫Ë™ç„Åß„Åç„Åæ„Åô„ÄÇ" />
      </Form>
    );
  }

  if (state.currentStep === "test-connection") {
    return (
      <Detail
        markdown={`# üß™ Êé•Á∂ö„ÉÜ„Çπ„Éà

Ë®≠ÂÆö„Åó„ÅüÂÜÖÂÆπ„ÅßLark„Å∏„ÅÆÊé•Á∂ö„Çí„ÉÜ„Çπ„Éà„Åó„Åæ„Åô„ÄÇ

## üìù Ë®≠ÂÆöÂÜÖÂÆπÁ¢∫Ë™ç

- **Domain**: ${state.domain}
- **App ID**: ${state.appId.substring(0, 8)}...
- **Receive ID**: ${state.receiveId}
- **Receive ID Type**: ${state.receiveIdType}

## üîÑ „ÉÜ„Çπ„ÉàÊâãÈ†Ü

1. **„ÄåÊé•Á∂ö„ÉÜ„Çπ„Éà„Äç**„Çí„ÇØ„É™„ÉÉ„ÇØ
2. Lark„Å´„ÉÜ„Çπ„Éà„É°„ÉÉ„Çª„Éº„Ç∏„ÅåÈÄÅ‰ø°„Åï„Çå„Åæ„Åô
3. Âèó‰ø°Á¢∫Ë™çÂæå„ÄÅ„Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÂÆå‰∫Ü

Ê∫ñÂÇô„Åå„Åß„Åç„Åü„Çâ„ÉÜ„Çπ„Éà„ÇíÈñãÂßã„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`}
        actions={
          <ActionPanel>
            <Action title="Êé•Á∂ö„ÉÜ„Çπ„Éà" onAction={testConnection} />
            <Action title="Ë®≠ÂÆö„Çí‰øÆÊ≠£" onAction={prevStep} />
          </ActionPanel>
        }
      />
    );
  }

  if (state.currentStep === "complete") {
    return (
      <Detail
        markdown={`# üéâ „Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÂÆå‰∫ÜÔºÅ

Lark Quick Memo„ÅÆË®≠ÂÆö„ÅåÊ≠£Â∏∏„Å´ÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ

## ‚úÖ Ë®≠ÂÆöÊ∏à„ÅøÂÜÖÂÆπ

- ‚úÖ Lark„Ç¢„Éó„É™Êé•Á∂öÁ¢∫Ë™çÊ∏à„Åø
- ‚úÖ „É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°„ÉÜ„Çπ„ÉàÊàêÂäü
- ‚úÖ ÂÖ®„Å¶„ÅÆË®≠ÂÆö„ÅåÊ≠£Â∏∏Âãï‰Ωú

## üöÄ ‰ΩøÁî®ÊñπÊ≥ï

1. **\`Cmd + Shift + M\`** „ÅßÊã°Âºµ„ÇíËµ∑Âãï
2. **„É°„É¢„ÇíÂÖ•Âäõ**
3. **\`Cmd + Enter\`** „ÅßÈÄÅ‰ø°
4. **Lark„ÅßÂèó‰ø°Á¢∫Ë™ç**

## ‚öôÔ∏è Ë®≠ÂÆö„ÅÆ‰øùÂ≠ò

ÊúÄÂæå„Å´„ÄÅExtension Preferences„ÅßË®≠ÂÆö„Çí‰øùÂ≠ò„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`}
        actions={
          <ActionPanel>
            <Action title="Ë®≠ÂÆö„Çí‰øùÂ≠ò" onAction={completeSetup} />
            <Action title="ÂÆå‰∫Ü" onAction={pop} />
          </ActionPanel>
        }
      />
    );
  }

  return null;
}